// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(cuid())
  email       String  @unique
  name        String?
  clerkUserId String  @unique
  imageUrl    String?

  boards                  Board[]
  organisationMemberships OrganisationMembership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organisation {
  id         String  @id @default(cuid())
  name       String  @unique
  clerkOrgId String  @unique
  imageUrl   String?

  boards                  Board[]
  organisationMemberships OrganisationMembership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrganisationMembership {
  id             String  @id @default(cuid())
  userId         String
  organisationId String
  role           String?

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organisation Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, organisationId])
}

model Board {
  id        String  @id @default(cuid())
  title     String
  orgId     String
  userId    String
  imageUrl  String?
  favourite Boolean @default(false)

  organisation Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
