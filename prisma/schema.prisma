// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(cuid())
  email       String  @unique
  name        String?
  clerkUserId String  @unique
  imageUrl    String?

  boards                  Board[]
  organisationMemberships OrganisationMembership[]
  Favorite                Favorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organisation {
  id         String  @id @default(cuid())
  name       String  @unique
  clerkOrgId String  @unique
  imageUrl   String?

  boards                  Board[]
  organisationMemberships OrganisationMembership[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Favorite  Favorite[]
}

model OrganisationMembership {
  id             String  @id @default(cuid())
  userId         String
  organisationId String
  clerkUserId    String
  clerkOrgId     String
  role           String?

  user         User         @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  organisation Organisation @relation(fields: [clerkOrgId], references: [clerkOrgId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([clerkUserId, clerkOrgId])
}

model Board {
  id          String  @id @default(cuid())
  title       String
  orgId       String
  userId      String
  imageUrl    String?
  clerkOrgId  String
  clerkUserId String

  organisation Organisation @relation(fields: [clerkOrgId], references: [clerkOrgId], onDelete: Cascade)
  user         User         @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Favorite  Favorite[]
}

model Favorite {
  id          String @id @default(cuid())
  userId      String
  boardId     String
  clerkUserId String
  clerkOrgId  String

  user         User         @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  organisation Organisation @relation(fields: [clerkOrgId], references: [clerkOrgId], onDelete: Cascade)
  board        Board        @relation(fields: [boardId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([clerkUserId, boardId])
  @@index([clerkOrgId, boardId])
}
